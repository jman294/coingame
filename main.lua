local HC = require "HC"
local game = {}

--game.width = 400
--game.height = 700

game.width = 500
game.height = 500

game.coinWidth = 25
game.coinHeight = 128

game.coinX = game.width / 2 - game.coinWidth / 2
game.coinY = game.height - game.coinHeight - 20

game.objects = {}

-- Load some default values for our rectangle.
function love.load()
  love.physics.setMeter(64) --the height of a meter our worlds will be 64px
  world = love.physics.newWorld(0, 9.81*64, true)

  --let's create a ball
  game.objects.ball = {}
  game.objects.ball.body = love.physics.newBody(world, 650/2, 650/2, "dynamic") --place the body in the center of the world and make it dynamic, so it can move around
  game.objects.ball.shape = love.physics.newCircleShape( 20) --the ball's shape has a radius of 20
  game.objects.ball.fixture = love.physics.newFixture(game.objects.ball.body, game.objects.ball.shape, 1) -- Attach fixture to body and give it a density of 1.

  love.graphics.setBackgroundColor(0.41, 0.53, 0.97)
  love.window.setMode(game.width, game.height, {resizable=false})
  animation = newAnimation(love.graphics.newImage("coinspritesheet.png"), 25, 128, .4)
end

-- Increase the size of the rectangle every frame.
function love.update(dt)
  animation.currentTime = animation.currentTime + dt
  if animation.currentTime >= animation.duration then
    animation.currentTime = animation.currentTime - animation.duration
  end

  world:update(dt) --this puts the world into motion
  if love.keyboard.isDown("right") then --press the right arrow key to push the ball to the right
    game.objects.ball.body:applyForce(400, 0)
  elseif love.keyboard.isDown("left") then --press the left arrow key to push the ball to the left
    game.objects.ball.body:applyForce(-400, 0)
  elseif love.keyboard.isDown("up") then --press the up arrow key to set the ball in the air
    game.objects.ball.body:setPosition(650/2, 650/2)
    game.objects.ball.body:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
  end
end

-- Draw a coloured rectangle.
function love.draw()
  love.graphics.setColor(0.76, 0.18, 0.05) --set the drawing color to red for the ball
  love.graphics.circle("fill", game.objects.ball.body:getX(), game.objects.ball.body:getY(), game.objects.ball.shape:getRadius())

  --local spriteNum = math.floor(animation.currentTime / animation.duration * #animation.quads) + 1
  --love.graphics.draw(animation.spriteSheet, animation.quads[spriteNum], game.coinX, game.coinY, 2, 1, 1, game.coinWidth/2, game.coinHeight/2)
end

function newAnimation(image, width, height, duration)
  local animation = {}
  animation.spriteSheet = image;
  animation.quads = {};

  for y = 0, image:getHeight() - height, height do
    for x = 0, image:getWidth() - width, width do
      table.insert(animation.quads, love.graphics.newQuad(x, y, width, height, image:getDimensions()))
    end
  end

  animation.duration = duration or 1
  animation.currentTime = 0

  return animation
end
